services:
  webapp:
    build: ./app
    container_name: adventureworks_app
    restart: always
    ports:
      - "5000:5000" # Flask App
    environment:
      - DB_SERVER=mssql # Connect to the mssql service name
      - DB_PASSWORD=${SQL_PASSWORD}
      - NEW_RELIC_LICENSE_KEY=${NEW_RELIC_LICENSE_KEY}
      - NEW_RELIC_APP_NAME=${PROJECT_PREFIX}-app
      - NEW_RELIC_DISTRIBUTED_TRACING_ENABLED=true
    depends_on:
      mssql:
        condition: service_healthy
    networks:
      - app-network

  locust:
    build: ./app # Re-use the same app image
    container_name: adventureworks_locust
    restart: always
    ports:
      - "8089:8089" # Locust UI
    # Override the command to start Locust instead of Gunicorn
    command: locust -f /app/locustfile.py --host http://webapp:5000 --web-port 8089
    depends_on:
      - webapp # Wait for the webapp to be available
    networks:
      - app-network

  mssql:
    build: ./mssql
    container_name: adventureworks_db
    restart: always
    ports:
      - "1433:1433"
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD=${SQL_PASSWORD}
    volumes:
      - mssql-data:/var/opt/mssql
    networks:
      - app-network
    # A more robust healthcheck that waits for our stored procedures to exist.
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P \"${SQL_PASSWORD}\" -d AdventureWorks -Q \"IF OBJECT_ID('GetRecentCustomerOrders', 'P') IS NOT NULL SELECT 1 ELSE SELECT 0\" | grep -q \"1\""]
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 30s

volumes:
  mssql-data:

networks:
  app-network:
